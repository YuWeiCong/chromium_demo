import("../mojo_demo.gni")
import("//mojo/public/tools/bindings/mojom.gni")

group("cpp_mojo") {
  testonly = true
  deps = [
    ":cpp_message_pipe_single_process",
    ":cpp_message_pipe_multiple_process",
    ":cpp_multiple_process_receiver",
    ":cpp_single_process_binding",
    ":cpp_single_process_receiver",
    ":cpp_single_process_bindmap",
    ":service",
  ]
}
mojo_demo("cpp_message_pipe_single_process") {
  sources = [
    "cpp_message_pipe_single_process.cc",
  ]
}

mojo_demo("cpp_message_pipe_multiple_process") {
  sources = [
    "cpp_message_pipe_multiple_process.cc",
    "pipe_reader.h"
  ]
}

mojo_demo("cpp_single_process_binding") {
  sources = [
    "cpp_single_process_binding.cc",
  ]
  deps = [":cpp_mojom"]
}

mojo_demo("cpp_single_process_receiver") {
  sources = [
    "cpp_single_process_receiver.cc",
  ]
  deps = [":cpp_mojom"]
}


mojo_demo("cpp_multiple_process_receiver") {
  sources = ["cpp_multiple_process_receiver.cc"]
  deps = [":cpp_mojom"]
}

mojo_demo("cpp_single_process_bindmap") {
  defines = ["ONLY_BINDING_SET"]
  sources = ["cpp_single_process_bindmap.cc"]
  deps = [":cpp_mojom"]
}

mojom("cpp_mojom"){
  sources = [
    "mojom/log.mojom",
  ]
}

executable("service") {
  testonly = true
  sources = ["service.cc"]
  deps = [
      "//base",
      "//mojo/public",
      "//mojo/core/embedder",
      "//services/service_manager/public/cpp",
      ":cpp_mojom",
       "//base",
    # TODO: 查明为什么这里必须显式依赖base_static，它明明已经作为base的public_deps了，
    # 难道public_deps对静态库（base_static）无效？
    "//base:base_static",
    "//mojo/public",
    "//services/service_manager",
    "//services/service_manager/embedder",
    "//services/service_manager/public/cpp/service_executable:support"
  ]
  defines = ["ONLY_BINDING_SET"]
}


